"""

- Update the `try_apply_aliases` func to handle multiple aliases separated by spaces.

- For the 'name' feature:
  - Show any pgn fields matching target substrings in red, and show links to lichess urls in blue.

- Test the skip move feature, with '2 and 3' for the first bounds and '2 and 3' again for the second
  bounds. From the user input instructions, should find positions where eval changes dramatically
  based on turn. But for the positions found, only those where the tempo doesn't really matter at all.
- Do variable renaming to be more correct when referring to "pgns" (that could just be study/db names).
- For plain pgn files, chessbase for some reason treats a ' - ' in White's name as meaning two
  opponents, and so it puts the rest of the string for Black's name. It also treats ', ' as meaning
  the first name.
    - So add a feature where if the program finds, say, moves in Black's name, or moves in either
      side's first name, it fixes it (and such that chessbase won't mess it up again: so no ' - ' or ', ').
- Add a way for the user to specify having at most a certain number of pieces total, rather than exactly that
  number.
    - Maybe ask the user for a min and max.
- Clean up the code a bit, wherever seems necessary.
    - E.g., put the for loop that iterates over moves into its own function.
    - And make a class to encapsulate specs from the user in the first part of main.
- Make a pytest file in order to do regression tests. Been multiple times now where a change has broken something,
  so good to have tests.
    - In the pytest file, include calling mypy, vulture, vermin, and your unused-funcs.py file from hypickle.
- When opening the pgn file, consider using 'with open'.
- When the Stockfish fork is eventually on PyPI, and updated so that mypy can analyze it, import it again for
  this project instead of using models.py directly.
- Make the move count (when to start looking for positions) and games_parsed counter in the main loop more exact.
- Write new hits to the output file with 'a' (append) rather than 'w' (rewriting all the file contents).
- Allow the user to specify a range of rows/files, rather than being forced to narrow down an area to just a single row/file.
- Allow for a "disjunction" in a requirement string. E.g., maybe the user wants any positions where a white rook
  is on any of a1, a2, or a3.
- Update the README with a section on the 'endgame' feature (i.e., allowed foramts for requirement strings).
  Could add a link to it when asking the user to input requirements.
- Could add an option where if the user wants, something like "R1p1" would mean one side has 1 rook,
  the other side has 1 pawn -- rather than it having to be White having 1 rook, Black having 1 pawn.
- Could make a separate print_output_data function for "underpromotion", since things are done differently.
  Could also not print out all hits for underpromotion, but rather just each new one (now doing this for
  every other mode).
"""